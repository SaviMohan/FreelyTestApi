org: savimohan
app: aws-node-http-api-project
service: aws-node-http-api-project
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x  
  region: us-east-1
  environment:
    DYNAMODB_USER_TABLE: ${self:service}-userTable-${sls:stage}
    DYNAMODB_MESSAGE_BOARD_TABLE: ${self:service}-messageBoardTable-${sls:stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:Get*"
        - "dynamodb:Scan*"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"        
      Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-userTable-${sls:stage}
    - Effect: Allow
      Action:
        - SNS:*
      Resource: "*"
    # - Effect: Allow
    #   Action:
    #     - SQS:*
    #   Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:Get*"
        - "dynamodb:Scan*"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"        
      Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-messageBoardTable-${sls:stage}

constructs:
    msgBoardQueue:
        type: queue
        worker:
            handler: createMessageBoardDownstream.createMessageBoardDownstream

functions:
  createMessageBoardUpstream:
    handler: createMessageBoardUpstream.createMessageBoardUpstream
    environment:
      QUEUE_URL: ${construct:msgBoardQueue.queueUrl}
    events:
      - httpApi:
          path: /createMessageBoard
          method: post  
  postMessageToBoardUpstream:
    handler: postMessageToBoardUpstream.postMessageToBoardUpstream
    events:
      - httpApi:
          path: /postMessageToBoard
          method: post
  postMessageToBoardDownstream:
    handler: postMessageToBoardDownstream.postMessageToBoardDownstream
    events:
      - sns: postMessageToBoardDownstream  
  registerUserUpstream:
    handler: registerUserUpstream.registerUserUpstream
    events:
      - httpApi:
          path: /registerUser
          method: post
  registerUserDownstream:
    handler: registerUserDownstream.registerUserDownstream
    events:
      - sns: registerUserDownstream
  getUser:
    handler: getUser.getUser
    events:
      - http:
          path: /getUser/{email}
          method: get
  listMessageBoards:
    handler: listMessageBoards.listMessageBoards
    events:
      - http:
          path: /listMessageBoards
          method: get
          
resources:
  Resources:
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        TableName: ${self:service}-userTable-${sls:stage}
    messageBoardTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: messageBoardId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: messageBoardId
            KeyType: HASH
        TableName: ${self:service}-messageBoardTable-${sls:stage}
plugins:
  - serverless-offline
  - serverless-lift
